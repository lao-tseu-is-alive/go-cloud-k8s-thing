// Package thing provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package thing

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List returns a list of thing
	// (GET /thing)
	List(ctx echo.Context, params ListParams) error
	// Create will create a new thing
	// (POST /thing)
	Create(ctx echo.Context) error
	// Delete allows to delete a specific thingId
	// (DELETE /thing/{thingId})
	Delete(ctx echo.Context, thingId int32) error
	// Get will retrieve in backend all information about a specific thingId
	// (GET /thing/{thingId})
	Get(ctx echo.Context, thingId int32) error
	// Update allows to modify information about a specific thingId
	// (PUT /thing/{thingId})
	Update(ctx echo.Context, thingId int32) error
	// ListByType returns a list of thing
	// (GET /thingByType/{typeId})
	ListByType(ctx echo.Context, typeId int32, params ListByTypeParams) error
	// TypeThingList returns a list of types
	// (GET /types)
	TypeThingList(ctx echo.Context, params TypeThingListParams) error
	// TypeThingCreate will create a new group
	// (POST /types)
	TypeThingCreate(ctx echo.Context) error
	// TypeThingDelete allows to delete a specific typeThingId
	// (DELETE /types/{typeThingId})
	TypeThingDelete(ctx echo.Context, typeThingId int32) error
	// TypeThingGet will retrieve in backend all information about a specific typeThingId
	// (GET /types/{typeThingId})
	TypeThingGet(ctx echo.Context, typeThingId int32) error
	// TypeThingUpdate allows to modify information about a specific typeThingId
	// (PUT /types/{typeThingId})
	TypeThingUpdate(ctx echo.Context, typeThingId int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.List(ctx, params)
	return err
}

// Create converts echo context to params.
func (w *ServerInterfaceWrapper) Create(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Create(ctx)
	return err
}

// Delete converts echo context to params.
func (w *ServerInterfaceWrapper) Delete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thingId" -------------
	var thingId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "thingId", runtime.ParamLocationPath, ctx.Param("thingId"), &thingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thingId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Delete(ctx, thingId)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thingId" -------------
	var thingId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "thingId", runtime.ParamLocationPath, ctx.Param("thingId"), &thingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thingId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx, thingId)
	return err
}

// Update converts echo context to params.
func (w *ServerInterfaceWrapper) Update(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "thingId" -------------
	var thingId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "thingId", runtime.ParamLocationPath, ctx.Param("thingId"), &thingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter thingId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Update(ctx, thingId)
	return err
}

// ListByType converts echo context to params.
func (w *ServerInterfaceWrapper) ListByType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "typeId" -------------
	var typeId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeId", runtime.ParamLocationPath, ctx.Param("typeId"), &typeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter typeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListByTypeParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListByType(ctx, typeId, params)
	return err
}

// TypeThingList converts echo context to params.
func (w *ServerInterfaceWrapper) TypeThingList(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TypeThingListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TypeThingList(ctx, params)
	return err
}

// TypeThingCreate converts echo context to params.
func (w *ServerInterfaceWrapper) TypeThingCreate(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TypeThingCreate(ctx)
	return err
}

// TypeThingDelete converts echo context to params.
func (w *ServerInterfaceWrapper) TypeThingDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "typeThingId" -------------
	var typeThingId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeThingId", runtime.ParamLocationPath, ctx.Param("typeThingId"), &typeThingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter typeThingId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TypeThingDelete(ctx, typeThingId)
	return err
}

// TypeThingGet converts echo context to params.
func (w *ServerInterfaceWrapper) TypeThingGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "typeThingId" -------------
	var typeThingId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeThingId", runtime.ParamLocationPath, ctx.Param("typeThingId"), &typeThingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter typeThingId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TypeThingGet(ctx, typeThingId)
	return err
}

// TypeThingUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) TypeThingUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "typeThingId" -------------
	var typeThingId int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "typeThingId", runtime.ParamLocationPath, ctx.Param("typeThingId"), &typeThingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter typeThingId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TypeThingUpdate(ctx, typeThingId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/thing", wrapper.List)
	router.POST(baseURL+"/thing", wrapper.Create)
	router.DELETE(baseURL+"/thing/:thingId", wrapper.Delete)
	router.GET(baseURL+"/thing/:thingId", wrapper.Get)
	router.PUT(baseURL+"/thing/:thingId", wrapper.Update)
	router.GET(baseURL+"/thingByType/:typeId", wrapper.ListByType)
	router.GET(baseURL+"/types", wrapper.TypeThingList)
	router.POST(baseURL+"/types", wrapper.TypeThingCreate)
	router.DELETE(baseURL+"/types/:typeThingId", wrapper.TypeThingDelete)
	router.GET(baseURL+"/types/:typeThingId", wrapper.TypeThingGet)
	router.PUT(baseURL+"/types/:typeThingId", wrapper.TypeThingUpdate)

}
